# Read a sequence of integers from memory, and check that they sum to 100

- [0,1,0,0]
- []
-
  program:
    # r0: temporary, r1: address, r2: sum
    - [mov, 1, null, true, 2]         # mov r1, 2
    - [mov, 0, null, false, 0]        # mov r0, r0 (no-op)

    # Top of loop (pc = 2):
    - [load, 0, null, false, 1]       # load r0, [r1]
    - [add, 2, 2, false, 0]           # add r2, r2, r0
    - [add, 1, 1, true, 1]            # add r1, r1, 1
    - [cmpe, 3, 0, true, 0]        # cmpe r0, 0
    - [cnjmp, null, 3, true, 2]    # cnjmp 2

    - [sub, 0, 2, true, 100]          # sub r0, r2, 100

  init_mem:
    - start: 2
      len: 8
      read_only: true
      secret: true
      data: [10, 20, 30, 40, 0, 0, 0, 0]

  params:
    num_regs: 4
    trace_len: 29
    sparsity:
      mem_op: 5

  trace:
    - [0, [ 0, 0,   0, 0]]
    - [1, [ 0, 2,   0, 0]]

    - [2, [ 0, 2,   0, 0]]
    - [3, [10, 2,   0, 0]]
    - [4, [10, 2,  10, 0]]
    - [5, [10, 3,  10, 0]]
    - [6, [10, 3,  10, 0]]

    - [2, [10, 3,  10, 0]]
    - [3, [20, 3,  10, 0]]
    - [4, [20, 3,  30, 0]]
    - [5, [20, 4,  30, 0]]
    - [6, [20, 4,  30, 0]]

    - [2, [20, 4,  30, 0]]
    - [3, [30, 4,  30, 0]]
    - [4, [30, 4,  60, 0]]
    - [5, [30, 5,  60, 0]]
    - [6, [30, 5,  60, 0]]

    - [2, [30, 5,  60, 0]]
    - [3, [40, 5,  60, 0]]
    - [4, [40, 5, 100, 0]]
    - [5, [40, 6, 100, 0]]
    - [6, [40, 6, 100, 0]]

    - [2, [40, 6, 100, 0]]
    - [3, [ 0, 6, 100, 0]]
    - [4, [ 0, 6, 100, 0]]
    - [5, [ 0, 7, 100, 0]]
    - [6, [ 0, 7, 100, 1]]

    - [7, [ 0, 7, 100, 1]]
    - [8, [ 0, 7, 100, 1]]

  advice:
    3:  [[MemOp, 2, 10, read]]
    8:  [[MemOp, 3, 20, read]]
    13: [[MemOp, 4, 30, read]]
    18: [[MemOp, 5, 40, read]]
    23: [[MemOp, 6, 0, read]]
