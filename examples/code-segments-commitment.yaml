# A copy of memory-3 that includes a params.commitment value for the secret
# init_mem data.

- [0,1,0,0]
- [code-segments]
-
  program:
    - name: main
      start: 0
      len: 2
      instrs:
        # r0: temporary, r1: address, r2: sum
        - [mov, 1, null, true, 16]        # mov r1, 2
        - [poison8, null, 1, true, 32]    # poison8 [32], r1

    - name: loop
      start: 2
      len: 5
      secret: true
      instrs:
        # Top of loop (pc = 2):
        - [load8, 0, null, false, 1]      # load8 r0, [r1]
        - [add, 2, 2, false, 0]           # add r2, r2, r0
        - [add, 1, 1, true, 8]            # add r1, r1, 8
        - [cmpe, 3, 0, true, 0]           # cmpe r0, 0
        - [cnjmp, null, 3, true, 2]       # cnjmp 2

    - name: exit
      start: 7
      len: 1
      instrs:
        - [sub, 0, 2, true, 100]          # sub r0, r2, 100

  init_mem:
    - start: 2
      len: 8
      read_only: true
      secret: true
      data: [10, 34, 0, 40, 0, 0, 0, 0]

  params:
    num_regs: 4
    trace_len: 29
    # The hash is computed as follows:
    #   from hashlib import sha256
    #   import struct
    #   instrs = [
    #     # (opcode, dest, op1, op2, imm)
    #     # Note this doesn't match the order used in the yaml file.
    #     (30, 0, 0, 1, 0),
    #     (4, 2, 2, 0, 0),
    #     (4, 1, 1, 8, 1),
    #     (13, 3, 0, 0, 1),
    #     (22, 0, 3, 2, 1),
    #   ]
    #   code = b''.join(struct.pack('<BBBQB', *i) for i in instrs)
    #   mem = b''.join(struct.pack('<Q', x) for x in [10, 34, 0, 40, 0, 0, 0, 0])
    #   print(sha256(code + mem).hexdigest())
    commitment: sha256:b3d9c0d56ce47969b7aa6a4e3bdf2e88e282e0651f5b4be8e7732b42173bc3aa

  trace:
    - [0, [ 0,  0,   0, 0]]
    - [1, [ 0, 16,   0, 0]]

    - [2, [ 0, 16,   0, 0]]
    - [3, [10, 16,   0, 0]]
    - [4, [10, 16,  10, 0]]
    - [5, [10, 24,  10, 0]]
    - [6, [10, 24,  10, 0]]

    - [2, [10, 24,  10, 0]]
    - [3, [34, 24,  10, 0]]
    - [4, [34, 24,  44, 0]]
    - [5, [34, 32,  44, 0]]
    - [6, [34, 32,  44, 0]]

    - [2, [34, 32,  44, 0]]
    - [3, [16, 32,  44, 0]]
    - [4, [16, 32,  60, 0]]
    - [5, [16, 40,  60, 0]]
    - [6, [16, 40,  60, 0]]

    - [2, [16, 40,  60, 0]]
    - [3, [40, 40,  60, 0]]
    - [4, [40, 40, 100, 0]]
    - [5, [40, 48, 100, 0]]
    - [6, [40, 48, 100, 0]]

    - [2, [40, 48, 100, 0]]
    - [3, [ 0, 48, 100, 0]]
    - [4, [ 0, 48, 100, 0]]
    - [5, [ 0, 56, 100, 0]]
    - [6, [ 0, 56, 100, 1]]

    - [7, [ 0, 56, 100, 1]]
    - [8, [ 0, 56, 100, 1]]

  advice:
    2:  [[MemOp, 32, 16, poison, 8]]
    3:  [[MemOp, 16, 10, read, 8]]
    8:  [[MemOp, 24, 34, read, 8]]
    13: [[MemOp, 32, 16, read, 8]]
    18: [[MemOp, 40, 40, read, 8]]
    23: [[MemOp, 48, 0, read, 8]]
